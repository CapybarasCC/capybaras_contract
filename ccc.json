{
    "compiler": {
        "version": "0.8.7+commit.e28d00a7"
    },
    "language": "Solidity",
    "output": {
        "abi": [
            {
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "ApprovalCallerNotOwnerNorApproved",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ApprovalQueryForNonexistentToken",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ApprovalToCurrentOwner",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "ApproveToCaller",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "BalanceQueryForZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "MintToZeroAddress",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "MintZeroQuantity",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "OwnerQueryForNonexistentToken",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TransferCallerNotOwnerNorApproved",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TransferFromIncorrectOwner",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TransferToNonERC721ReceiverImplementer",
                "type": "error"
            },
            {
                "inputs": [],
                "name": "TransferToZeroAddress",
                "type": "error"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "approved",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "Approval",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "operator",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "bool",
                        "name": "approved",
                        "type": "bool"
                    }
                ],
                "name": "ApprovalForAll",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "previousOwner",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "newOwner",
                        "type": "address"
                    }
                ],
                "name": "OwnershipTransferred",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "Transfer",
                "type": "event"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "addressMintedBalance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "approve",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "name": "balanceOf",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "costOG",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "costPublic",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "costWL",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "getApproved",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "hiddenMetadataUri",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "operator",
                        "type": "address"
                    }
                ],
                "name": "isApprovedForAll",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "maxMintAmountPerTx",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "maxSupply",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "maxSupplyForDevs",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_mintAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "_receiver",
                        "type": "address"
                    }
                ],
                "name": "mintForAddress",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_mintAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes32[]",
                        "name": "proof",
                        "type": "bytes32[]"
                    }
                ],
                "name": "mintOG",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_mintAmount",
                        "type": "uint256"
                    }
                ],
                "name": "mintPublicSale",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_mintAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes32[]",
                        "name": "proof",
                        "type": "bytes32[]"
                    }
                ],
                "name": "mintWL",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "name",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "nftPerAddressLimit",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "nftPerAddressLimitPreSale",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "owner",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "ownerOf",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "paused",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "presale",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "renounceOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "revealed",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "safeTransferFrom",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "_data",
                        "type": "bytes"
                    }
                ],
                "name": "safeTransferFrom",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "operator",
                        "type": "address"
                    },
                    {
                        "internalType": "bool",
                        "name": "approved",
                        "type": "bool"
                    }
                ],
                "name": "setApprovalForAll",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_cost",
                        "type": "uint256"
                    }
                ],
                "name": "setCostOG",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_cost",
                        "type": "uint256"
                    }
                ],
                "name": "setCostPublic",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_cost",
                        "type": "uint256"
                    }
                ],
                "name": "setCostWL",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_hiddenMetadataUri",
                        "type": "string"
                    }
                ],
                "name": "setHiddenMetadataUri",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_maxMintAmountPerTx",
                        "type": "uint256"
                    }
                ],
                "name": "setMaxMintAmountPerTx",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bool",
                        "name": "_state",
                        "type": "bool"
                    }
                ],
                "name": "setPaused",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bool",
                        "name": "_state",
                        "type": "bool"
                    }
                ],
                "name": "setPresale",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bool",
                        "name": "_state",
                        "type": "bool"
                    }
                ],
                "name": "setRevealed",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_root",
                        "type": "bytes32"
                    }
                ],
                "name": "setRootOg",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_root",
                        "type": "bytes32"
                    }
                ],
                "name": "setRootWl",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_uriPrefix",
                        "type": "string"
                    }
                ],
                "name": "setUriPrefix",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "_uriSuffix",
                        "type": "string"
                    }
                ],
                "name": "setUriSuffix",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "interfaceId",
                        "type": "bytes4"
                    }
                ],
                "name": "supportsInterface",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "symbol",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "tokenURI",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "totalSupply",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "transferFrom",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "newOwner",
                        "type": "address"
                    }
                ],
                "name": "transferOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "uriPrefix",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "uriSuffix",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "withdraw",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "author": "Capybaras Country Club Team",
            "details": "The contract uses Azukis ERC721 implementation {see ER721A.sol for more details}source for ERC721A: https://github.com/chiru-labs/ERC721A",
            "kind": "dev",
            "methods": {
                "approve(address,uint256)": {
                    "details": "See {IERC721-approve}."
                },
                "balanceOf(address)": {
                    "details": "See {IERC721-balanceOf}."
                },
                "getApproved(uint256)": {
                    "details": "See {IERC721-getApproved}."
                },
                "isApprovedForAll(address,address)": {
                    "details": "See {IERC721-isApprovedForAll}."
                },
                "mintForAddress(uint256,address)": {
                    "details": "Mints NFTs for the private sale when presale is true",
                    "params": {
                        "_mintAmount": "quantity of tokens to transfer",
                        "_receiver": "wallet of the recipient"
                    }
                },
                "mintOG(uint256,bytes32[])": {
                    "details": "Mints NFTs for the private sale when presale is true",
                    "params": {
                        "_mintAmount": "is to number of NFTs to mint",
                        "proof": "is an array of byte32 hashes"
                    }
                },
                "mintPublicSale(uint256)": {
                    "details": "Mints NFTs for public sale when presale is false at a discount",
                    "params": {
                        "_mintAmount": "is to number of NFTs to mint"
                    }
                },
                "mintWL(uint256,bytes32[])": {
                    "details": "Mints NFTs for the private sale when presale is true",
                    "params": {
                        "_mintAmount": "is to number of NFTs to mint",
                        "proof": "is an array of byte32 hashes"
                    }
                },
                "name()": {
                    "details": "See {IERC721Metadata-name}."
                },
                "owner()": {
                    "details": "Returns the address of the current owner."
                },
                "ownerOf(uint256)": {
                    "details": "See {IERC721-ownerOf}."
                },
                "renounceOwnership()": {
                    "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
                },
                "safeTransferFrom(address,address,uint256)": {
                    "details": "See {IERC721-safeTransferFrom}."
                },
                "safeTransferFrom(address,address,uint256,bytes)": {
                    "details": "See {IERC721-safeTransferFrom}."
                },
                "setApprovalForAll(address,bool)": {
                    "details": "See {IERC721-setApprovalForAll}."
                },
                "setCostOG(uint256)": {
                    "params": {
                        "_cost": "new cost of minting"
                    }
                },
                "setCostPublic(uint256)": {
                    "params": {
                        "_cost": "new cost of minting"
                    }
                },
                "setCostWL(uint256)": {
                    "params": {
                        "_cost": "new cost of minting"
                    }
                },
                "setHiddenMetadataUri(string)": {
                    "params": {
                        "_hiddenMetadataUri": "new uri where the metadata is stored"
                    }
                },
                "setMaxMintAmountPerTx(uint256)": {
                    "details": "It's a cap to avoid network congestion",
                    "params": {
                        "_maxMintAmountPerTx": "new max amount of tokens to be minted per tx"
                    }
                },
                "setPaused(bool)": {
                    "params": {
                        "_state": "true or false"
                    }
                },
                "setPresale(bool)": {
                    "params": {
                        "_state": "true or false"
                    }
                },
                "setRevealed(bool)": {
                    "params": {
                        "_state": "true or false"
                    }
                },
                "setRootOg(bytes32)": {
                    "params": {
                        "_root": "new Merkle root hash for the list of Og addresses"
                    }
                },
                "setRootWl(bytes32)": {
                    "params": {
                        "_root": "new Merkle root hash for the list of whitelisted addresses"
                    }
                },
                "setUriPrefix(string)": {
                    "params": {
                        "_uriPrefix": "new uri prefix for the metadata"
                    }
                },
                "setUriSuffix(string)": {
                    "params": {
                        "_uriSuffix": "new uri suffix for the metadata"
                    }
                },
                "supportsInterface(bytes4)": {
                    "details": "See {IERC165-supportsInterface}."
                },
                "symbol()": {
                    "details": "See {IERC721Metadata-symbol}."
                },
                "tokenURI(uint256)": {
                    "params": {
                        "_tokenId": "id of the token eg: 1,2,3,4,5"
                    }
                },
                "totalSupply()": {
                    "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
                },
                "transferFrom(address,address,uint256)": {
                    "details": "See {IERC721-transferFrom}."
                },
                "transferOwnership(address)": {
                    "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
                }
            },
            "title": "Capybaras Country Club NFT mint contract",
            "version": 1
        },
        "userdoc": {
            "kind": "user",
            "methods": {
                "mintOG(uint256,bytes32[])": {
                    "notice": "Mints for OGs with a 20% discount"
                },
                "mintPublicSale(uint256)": {
                    "notice": "Mints for public sale at full price. WL and OG can go up to 5 NFT (3 in pre-sale and 2 in public sale)."
                },
                "mintWL(uint256,bytes32[])": {
                    "notice": "Mints for whitelisted users with a 10% discount"
                },
                "setCostOG(uint256)": {
                    "notice": "Updates the mint cost"
                },
                "setCostPublic(uint256)": {
                    "notice": "Updates the mint cost"
                },
                "setCostWL(uint256)": {
                    "notice": "Updates the mint cost"
                },
                "setHiddenMetadataUri(string)": {
                    "notice": "Sets the uri where the metadata is stored when the contract is not revealed"
                },
                "setMaxMintAmountPerTx(uint256)": {
                    "notice": "Sets the maximum amount of tokens to be minted per transaction"
                },
                "setPaused(bool)": {
                    "notice": "Sets paused contract state"
                },
                "setPresale(bool)": {
                    "notice": "Sets presale state"
                },
                "setRevealed(bool)": {
                    "notice": "Reveals the metadata of the tokens"
                },
                "setRootOg(bytes32)": {
                    "notice": "Sets Merkle root hash for the list of og addresses"
                },
                "setRootWl(bytes32)": {
                    "notice": "Sets Merkle root hash for the list of whitelisted addresses"
                },
                "setUriPrefix(string)": {
                    "notice": "Sets the uri prefix for the metadata Eg: ipfs//:"
                },
                "setUriSuffix(string)": {
                    "notice": "Sets the uri suffix for the metadata Eg: png"
                },
                "tokenURI(uint256)": {
                    "notice": "Queries contract tokens by id"
                },
                "withdraw()": {
                    "notice": "Withdraws balance from the contract wallet"
                }
            },
            "version": 1
        }
    },
    "settings": {
        "compilationTarget": {
            "contracts/ContractCCC.sol": "CCCMintContract"
        },
        "evmVersion": "london",
        "libraries": {},
        "metadata": {
            "bytecodeHash": "ipfs"
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "remappings": []
    },
    "sources": {
        "@openzeppelin/contracts/access/Ownable.sol": {
            "keccak256": "0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9",
            "license": "MIT",
            "urls": [
                "bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981",
                "dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51"
            ]
        },
        "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
            "keccak256": "0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990",
            "license": "MIT",
            "urls": [
                "bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849",
                "dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh"
            ]
        },
        "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
            "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
            "license": "MIT",
            "urls": [
                "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
                "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
            ]
        },
        "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
            "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
            "license": "MIT",
            "urls": [
                "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
                "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
            ]
        },
        "@openzeppelin/contracts/utils/Address.sol": {
            "keccak256": "0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87",
            "license": "MIT",
            "urls": [
                "bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58",
                "dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV"
            ]
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
            "license": "MIT",
            "urls": [
                "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
                "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
            ]
        },
        "@openzeppelin/contracts/utils/Strings.sol": {
            "keccak256": "0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45",
            "license": "MIT",
            "urls": [
                "bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30",
                "dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2"
            ]
        },
        "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
            "keccak256": "0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a",
            "license": "MIT",
            "urls": [
                "bzz-raw://1e8a1dd0eac2fa865dc9a052bee01eec31677d7bc01b5b5aa825d820f3f1b343",
                "dweb:/ipfs/QmR8WuNeoAvJhnL7msQfQwaZEkwVnNyNDUNBL3Y616ohYa"
            ]
        },
        "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
            "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
            "license": "MIT",
            "urls": [
                "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
                "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
            ]
        },
        "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
            "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
            "license": "MIT",
            "urls": [
                "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
                "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
            ]
        },
        "contracts/ContractCCC.sol": {
            "keccak256": "0x5131c3a8c7335d3188c7977e58399b879434019af1553753c65df7a100c575f1",
            "license": "MIT",
            "urls": [
                "bzz-raw://9f7e47ab81ea6e3480bb447efbe386ca738ed62fc92c769c0ca73442a38e7ab9",
                "dweb:/ipfs/Qma2Dcdg47bsNtzMVuXuosbfPpu5kLyp4DKS157uTyJFEd"
            ]
        },
        "erc721a/contracts/ERC721A.sol": {
            "keccak256": "0x4fc71126b4ddba95744cf178a3090854107d85c3c9a764f03af29dc17682dafa",
            "license": "MIT",
            "urls": [
                "bzz-raw://4dbd11f283f25d03611fac883a9e64223f5739be46d561fde2294fc953651dd3",
                "dweb:/ipfs/QmUYTANBhuvHrWnb4AbscFXpa8GB5Kf8cDPoxBbDx4Hs7g"
            ]
        }
    },
    "version": 1
}